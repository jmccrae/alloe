/*
 * AlloeMain.java
 *
 * Created on 09 January 2008, 16:57
 */

package nii.alloe.gui;

import javax.swing.*;
import javax.swing.table.*;
import java.io.*;
import java.util.*;
import nii.alloe.corpus.*;
import nii.alloe.corpus.pattern.*;
import nii.alloe.niceties.*;

/**
 *
 * @author  john
 */
public class AlloeMain extends javax.swing.JFrame {
    private Corpus corpus;
    
    private String corpusTextFile;
    private String corpusTermSetFile;
    private String corpusIndexFile;
    private CorpusLoader corpusLoader;
    private JFileChooser fileChooser;
    private CorpusLoaderProgressListener clProgListener;
    private PatternGeneratorListener pbListener;
    private HashMap<String, String> termSetFileName;
    private HashMap<String, PatternBuilder> patternBuilderProcess;
    private HashMap<String, PatternSet> patternSets;
    
    private AlloeMain thisForAnon;
    
    /** Creates new form AlloeMain */
    public AlloeMain() {
        initComponents();
        corpusTextFile = corpusTermSetFile = corpusIndexFile = "";
        fileChooser = new JFileChooser();
        thisForAnon = this;
        corpusDisplayTableModel = new CorpusTableModel();
        termSetFileName = new HashMap<String,String>();
        patternBuilderProcess = new HashMap<String,PatternBuilder>();
        patternSets = new HashMap<String,PatternSet>();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        corpusAction = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        openCorpusTextFile = new javax.swing.JButton();
        openCorpusTermSet = new javax.swing.JButton();
        textFileLabel = new javax.swing.JLabel();
        termSetLabel = new javax.swing.JLabel();
        indexerProgressMonitor = new nii.alloe.gui.ProcessMonitor();
        if(clProgListener == null)
        clProgListener = new CorpusLoaderProgressListener();
        indexerProgressMonitor.addExtraListener(clProgListener);
        indexLocationLabel = new javax.swing.JLabel();
        setIndexButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        openIndexedCorpus = new javax.swing.JButton();
        saveIndexedCorpus = new javax.swing.JButton();
        corpusDisplayScroll = new javax.swing.JScrollPane();
        corpusDisplay = new javax.swing.JTable();
        corpusTotalLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        termPairSetLabel = new javax.swing.JLabel();
        openTermPairSet = new javax.swing.JButton();
        patternGeneratorRelationship = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        patternGeneratorProgressMonitor = new nii.alloe.gui.ProcessMonitor();
        patternBuilderMetric = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        patternViewerRelationshipLabel = new javax.swing.JLabel();
        patternViewerRelationship = new javax.swing.JComboBox();
        openPatternSet = new javax.swing.JButton();
        savePatternSet = new javax.swing.JButton();
        totalPatternsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patternTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Alloe");
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus Indexer"));
        openCorpusTextFile.setText("Open Text File");
        openCorpusTextFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCorpusTextFileActionPerformed(evt);
            }
        });

        openCorpusTermSet.setText("Open Term Set");
        openCorpusTermSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCorpusTermSetActionPerformed(evt);
            }
        });

        textFileLabel.setText("Text File: Not Loaded");

        termSetLabel.setText("Term Set: Not Loaded");

        indexerProgressMonitor.setProcessCompletedText("Corpus loaded");
        indexerProgressMonitor.setProcessNotStartedText("Corpus not loaded");

        indexLocationLabel.setText("Index Location: Not Loaded");

        setIndexButton.setText("Set Index");
        setIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setIndexButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexerProgressMonitor, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(termSetLabel)
                            .addComponent(textFileLabel)
                            .addComponent(indexLocationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 168, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(setIndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openCorpusTextFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openCorpusTermSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFileLabel)
                    .addComponent(openCorpusTextFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openCorpusTermSet)
                    .addComponent(termSetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexLocationLabel)
                    .addComponent(setIndexButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexerProgressMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus"));
        openIndexedCorpus.setText("Open Corpus");
        openIndexedCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openIndexedCorpusActionPerformed(evt);
            }
        });

        saveIndexedCorpus.setText("Save Corpus");
        saveIndexedCorpus.setEnabled(false);
        saveIndexedCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveIndexedCorpusActionPerformed(evt);
            }
        });

        corpusDisplay.setModel(getCorpusDisplayTableModel());
        corpusDisplayScroll.setViewportView(corpusDisplay);

        corpusTotalLabel.setText("Total Contexts: 0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(corpusDisplayScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(openIndexedCorpus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveIndexedCorpus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(corpusTotalLabel)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openIndexedCorpus)
                    .addComponent(saveIndexedCorpus)
                    .addComponent(corpusTotalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(corpusDisplayScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Corpus", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate Patterns"));
        termPairSetLabel.setText("Term Pair Set:");
        termPairSetLabel.setEnabled(false);

        openTermPairSet.setText("Open Term Pair Set");
        openTermPairSet.setEnabled(false);
        openTermPairSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTermPairSetActionPerformed(evt);
            }
        });

        patternGeneratorRelationship.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "New..." }));
        patternGeneratorRelationship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternGeneratorRelationshipActionPerformed(evt);
            }
        });

        jLabel2.setText("Relationship:");

        patternBuilderMetric.setModel(new DefaultComboBoxModel(PatternMetricFactory.getPatternMetrics()));
        patternBuilderMetric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternBuilderMetricActionPerformed(evt);
            }
        });

        jLabel3.setText("Metric::");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(patternGeneratorProgressMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternGeneratorRelationship, 0, 360, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(termPairSetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, Short.MAX_VALUE)
                        .addComponent(openTermPairSet))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternBuilderMetric, 0, 397, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(patternGeneratorRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(termPairSetLabel)
                    .addComponent(openTermPairSet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(patternBuilderMetric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patternGeneratorProgressMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Pattern Sets"));
        patternViewerRelationshipLabel.setText("Relationship:");
        patternViewerRelationshipLabel.setEnabled(false);

        patternViewerRelationship.setEnabled(false);

        openPatternSet.setText("Open Pattern Set");
        openPatternSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPatternSetActionPerformed(evt);
            }
        });

        savePatternSet.setText("Save Pattern Set");
        savePatternSet.setEnabled(false);
        savePatternSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatternSetActionPerformed(evt);
            }
        });

        totalPatternsLabel.setText("Total Patterns:");

        patternTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pattern", "Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patternTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(patternViewerRelationshipLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternViewerRelationship, 0, 360, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(openPatternSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(savePatternSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalPatternsLabel)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patternViewerRelationshipLabel)
                    .addComponent(patternViewerRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openPatternSet)
                    .addComponent(savePatternSet)
                    .addComponent(totalPatternsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Patterns", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 521, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("tab3", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 526, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void onPatternSetLoad(String relationship) {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel)patternViewerRelationship.getModel();
        if(dcbm.getIndexOf(relationship) == -1) {
            patternViewerRelationship.addItem(relationship);
        }
        patternViewerRelationship.setSelectedItem(relationship);
        patternViewerRelationship.setEnabled(true);
        patternViewerRelationshipLabel.setEnabled(true);
        PatternSet ps = patternSets.get(relationship);
        
        totalPatternsLabel.setText("Total Patterns: " + ps.size());
        
        DefaultTableModel dtm = (DefaultTableModel)patternTable.getModel();
        Object[][] o = new Object[ps.size()][2];
        Iterator<Map.Entry<Pattern,Double>> iter = ps.entrySet().iterator();
        int i = 0;
        while(iter.hasNext()) {
            Map.Entry<Pattern,Double> e = iter.next();
            o[i][0] = e.getKey().toString();
            o[i++][1] = e.getValue();
        }
        String [] s = { "Pattern", "Score" };
        dtm.setDataVector(o,s);
    }
    
    private class PatternGeneratorListener implements PatternBuilderListener {
        String relationship;
        
        public PatternGeneratorListener(String rel) { relationship = rel; }
        /** Called whenever progress is made
         * @param newProgress The new progress percentage (as double between 0 and 1) */
        public void progressChange(double newProgress) {}
        
        /** Called when the process finishes */
        public void finished() { 
            patternSets.put(relationship, patternBuilderProcess.get(relationship).patternScores);
            onPatternSetLoad(relationship); }
        
        public void patternGenerated(Pattern p, double score) {
            if(patternViewerRelationship.getSelectedItem().toString().equals(relationship)) {
                DefaultTableModel dtm = (DefaultTableModel)patternTable.getModel();
                Object[] row = new Object[2];
                row[0] = p.toString();
                row[1] = new Double(score);
                dtm.addRow(row);
                totalPatternsLabel.setText("Total Patterns: " + patternBuilderProcess.get(relationship).patternScores.size());
            }
        }
    }
    
    private void savePatternSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatternSetActionPerformed
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                oos.writeObject(patternSets.get(patternViewerRelationship.getSelectedItem().toString()));
                oos.close();
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not save pattern set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_savePatternSetActionPerformed
    
    private void openPatternSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPatternSetActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
                Object o = ois.readObject();
                if(!(o instanceof PatternSet)) {
                    JOptionPane.showMessageDialog(this, "Invalid format", "Could not open pattern set", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                PatternSet ps = (PatternSet)o;
                patternSets.put(ps.getRelationship(),ps);
                onPatternSetLoad(ps.getRelationship());
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open pattern set", JOptionPane.ERROR_MESSAGE);
            } catch(ClassNotFoundException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open pattern set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openPatternSetActionPerformed
    
    private void patternBuilderMetricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternBuilderMetricActionPerformed
        PatternBuilder pb = patternBuilderProcess.get(patternGeneratorRelationship.getSelectedItem().toString());
        if(pb != null && !pb.isRunning()) {
            pb.setPatternMetric(patternBuilderMetric.getSelectedItem().toString());
        }
    }//GEN-LAST:event_patternBuilderMetricActionPerformed
    
    private void initPatternBuilderProcess(String name) {
        if(!patternBuilderProcess.containsKey(name)) {
            try {
                ObjectInputStream ios = new ObjectInputStream(new FileInputStream(termSetFileName.get(name)));
                Object o = ios.readObject();
                if(!(o instanceof TermPairSet)) {
                    JOptionPane.showMessageDialog(this, "Invalid format", "Could not open term set", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                PatternBuilder pb =  new PatternBuilder(corpus, (TermPairSet)o,
                        (String)patternBuilderMetric.getSelectedItem());
                patternBuilderProcess.put(name,pb);
                patternGeneratorProgressMonitor.setProcess(pb);
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open term set", JOptionPane.ERROR_MESSAGE);
            } catch(ClassNotFoundException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open term set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void openTermPairSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTermPairSetActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            termSetFileName.put(patternGeneratorRelationship.getSelectedItem().toString(),
                    fileChooser.getSelectedFile().getAbsolutePath());
            termPairSetLabel.setText("Term Pair Set: " + fileChooser.getSelectedFile().getPath());
            if(corpus != null) {
                initPatternBuilderProcess(patternGeneratorRelationship.getSelectedItem().toString());
            }
        }
    }//GEN-LAST:event_openTermPairSetActionPerformed
    
    private void patternGeneratorRelationshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternGeneratorRelationshipActionPerformed
        if(patternGeneratorRelationship.getSelectedItem().equals("New...")) {
            String name = JOptionPane.showInputDialog(this, "New Relation", "");
            ((DefaultComboBoxModel)patternGeneratorRelationship.getModel()).insertElementAt(name,0);
            if(patternGeneratorRelationship.getItemAt(1).equals("")) {
                patternGeneratorRelationship.removeItemAt(1);
            }
            
            patternGeneratorRelationship.setSelectedItem(name);
        }
        
        termPairSetLabel.setEnabled(true);
        String s = termSetFileName.get(patternGeneratorRelationship.getSelectedItem().toString());
        termPairSetLabel.setText("Term Pair Set: " + (s == null ? "" : s));
        openTermPairSet.setEnabled(true);
        
        patternGeneratorProgressMonitor.setProcess(patternBuilderProcess.get(patternGeneratorRelationship.getSelectedItem().toString()));
    }//GEN-LAST:event_patternGeneratorRelationshipActionPerformed
    
    private void saveIndexedCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveIndexedCorpusActionPerformed
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                oos.writeObject(corpus);
                oos.close();
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not save corpus", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveIndexedCorpusActionPerformed
    
    private void setIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setIndexButtonActionPerformed
        int oldFMS = fileChooser.getFileSelectionMode();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            fileChooser.setFileSelectionMode(oldFMS);
            fileChooser.setAcceptAllFileFilterUsed(true);
            return;
        }
        fileChooser.setFileSelectionMode(oldFMS);
        fileChooser.setAcceptAllFileFilterUsed(true);
        corpusIndexFile = fileChooser.getSelectedFile().getAbsolutePath();
        indexLocationLabel.setText("Index Location: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0&&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_setIndexButtonActionPerformed
    
    private void prepareCorpusLoader() {
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(corpusTermSetFile));
            Object o = ois.readObject();
            if(!(o instanceof TermList)) {
                JOptionPane.showMessageDialog(this, "Invalid File Format", "Could not open term set", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            corpusLoader = new CorpusLoader((TermList)o, corpusTextFile, corpusIndexFile);
            indexerProgressMonitor.setProcess(corpusLoader);
            if(clProgListener == null)
                clProgListener = new CorpusLoaderProgressListener();
            corpusLoader.addProgressListener(clProgListener);
            
        } catch(IOException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not initialize indexer", JOptionPane.ERROR_MESSAGE);
        } catch(ClassNotFoundException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not initialize indexer", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private class CorpusTableModel extends AbstractTableModel {
        public int getColumnCount() { return 2; }
        public int getRowCount() { return corpus == null ? 0 : corpus.terms.size(); }
        public Object getValueAt(int i, int j) {
            if(j == 0) {
                return corpus.terms.get(i);
            } else if(j == 1) {
                return corpus.getHitsForTerm(corpus.terms.get(i));
            } else {
                assert false;
                return null;
            }
        }
        public String getColumnName(int j) {
            if(j == 0) {
                return "Term";
            } else if(j == 1) {
                return "Frequency";
            } else {
                assert false;
                return null;
            }
        }
    }
    
    private void onCorpusLoad() {
        corpusTotalLabel.setText("Total Contexts: " + corpus.getTotalDocs());
        corpusDisplayTableModel.fireTableDataChanged();
        corpusDisplay.revalidate();
        saveIndexedCorpus.setEnabled(true);
    }
    
    private void openIndexedCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openIndexedCorpusActionPerformed
        try {
            if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
                return;
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
            Object o = ois.readObject();
            if(!(o instanceof Corpus)) {
                JOptionPane.showMessageDialog(this, "Invalid Format", "Could not load corpus", JOptionPane.ERROR_MESSAGE);
                return;
            }
            corpus = (Corpus)o;
            onCorpusLoad();
        } catch(IOException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not load corpus", JOptionPane.ERROR_MESSAGE);
        } catch(ClassNotFoundException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not load corpus", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openIndexedCorpusActionPerformed
    
    private class CorpusLoaderProgressListener implements AlloeProgressListener {
        public void finished() {
            //corpus = corpusLoader.corpus;
            AlloeProcess p = indexerProgressMonitor.getProcess();
            assert p instanceof CorpusLoader;
            corpus = ((CorpusLoader)p).corpus;
            onCorpusLoad();
        }
        public void progressChange(double newProgress) {
        }
    }
    
    private void openCorpusTermSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCorpusTermSetActionPerformed
        fileChooser.showOpenDialog(this);
        corpusTermSetFile = fileChooser.getSelectedFile().getAbsolutePath();
        termSetLabel.setText("Term Set: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0 &&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_openCorpusTermSetActionPerformed
    
    private void openCorpusTextFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCorpusTextFileActionPerformed
        fileChooser.showOpenDialog(this);
        corpusTextFile = fileChooser.getSelectedFile().getAbsolutePath();
        textFileLabel.setText("Text File: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0&&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_openCorpusTextFileActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlloeMain().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup corpusAction;
    private javax.swing.JTable corpusDisplay;
    private javax.swing.JScrollPane corpusDisplayScroll;
    private javax.swing.JLabel corpusTotalLabel;
    private javax.swing.JLabel indexLocationLabel;
    private nii.alloe.gui.ProcessMonitor indexerProgressMonitor;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton openCorpusTermSet;
    private javax.swing.JButton openCorpusTextFile;
    private javax.swing.JButton openIndexedCorpus;
    private javax.swing.JButton openPatternSet;
    private javax.swing.JButton openTermPairSet;
    private javax.swing.JComboBox patternBuilderMetric;
    private nii.alloe.gui.ProcessMonitor patternGeneratorProgressMonitor;
    private javax.swing.JComboBox patternGeneratorRelationship;
    private javax.swing.JTable patternTable;
    private javax.swing.JComboBox patternViewerRelationship;
    private javax.swing.JLabel patternViewerRelationshipLabel;
    private javax.swing.JButton saveIndexedCorpus;
    private javax.swing.JButton savePatternSet;
    private javax.swing.JButton setIndexButton;
    private javax.swing.JLabel termPairSetLabel;
    private javax.swing.JLabel termSetLabel;
    private javax.swing.JLabel textFileLabel;
    private javax.swing.JLabel totalPatternsLabel;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Holds value of property corpusDisplayTableModel.
     */
    private CorpusTableModel corpusDisplayTableModel;
    
    /**
     * Getter for property corpusDisplayTableModel.
     * @return Value of property corpusDisplayTableModel.
     */
    public CorpusTableModel getCorpusDisplayTableModel() {
        if(corpusDisplayTableModel != null)
            return this.corpusDisplayTableModel;
        else
            return corpusDisplayTableModel = new CorpusTableModel();
    }
    
    /**
     * Setter for property corpusDisplayTableModel.
     * @param corpusDisplayTableModel New value of property corpusDisplayTableModel.
     */
    public void setCorpusDisplayTableModel(CorpusTableModel corpusDisplayTableModel) {
        this.corpusDisplayTableModel = corpusDisplayTableModel;
    }
    
}
