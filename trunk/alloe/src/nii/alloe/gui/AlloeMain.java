/*
 * AlloeMain.java
 *
 * Created on 09 January 2008, 16:57
 */

package nii.alloe.gui;

import javax.swing.*;
import javax.swing.table.*;
import java.io.*;
import java.util.*;
import nii.alloe.corpus.*;
import nii.alloe.niceties.AlloeProgressListener;
import nii.alloe.niceties.CannotPauseException;

/**
 *
 * @author  john
 */
public class AlloeMain extends javax.swing.JFrame {
    private Corpus corpus;
    
    private String corpusTextFile;
    private String corpusTermSetFile;
    private String corpusIndexFile;
    private CorpusLoader corpusLoader;
    private JFileChooser fileChooser;
    private CorpusLoaderProgressListener clProgListener;
    
    private AlloeMain thisForAnon;
    
    /** Creates new form AlloeMain */
    public AlloeMain() {
        initComponents();
        corpusTextFile = corpusTermSetFile = corpusIndexFile = "";
        fileChooser = new JFileChooser();
        thisForAnon = this;
        corpusDisplayTableModel = new CorpusTableModel();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        corpusAction = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        openCorpusTextFile = new javax.swing.JButton();
        openCorpusTermSet = new javax.swing.JButton();
        textFileLabel = new javax.swing.JLabel();
        termSetLabel = new javax.swing.JLabel();
        indexerProgressMonitor = new nii.alloe.gui.ProcessMonitor();
        indexLocationLabel = new javax.swing.JLabel();
        setIndexButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        openIndexedCorpus = new javax.swing.JButton();
        saveIndexedCorpus = new javax.swing.JButton();
        corpusDisplayScroll = new javax.swing.JScrollPane();
        corpusDisplay = new javax.swing.JTable();
        corpusTotalLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("tab2", jPanel2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 483, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("tab3", jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus Indexer"));
        openCorpusTextFile.setText("Open Text File");
        openCorpusTextFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCorpusTextFileActionPerformed(evt);
            }
        });

        openCorpusTermSet.setText("Open Term Set");
        openCorpusTermSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCorpusTermSetActionPerformed(evt);
            }
        });

        textFileLabel.setText("Text File: Not Loaded");

        termSetLabel.setText("Term Set: Not Loaded");

        indexerProgressMonitor.setProcessCompletedText("Corpus loaded");
        indexerProgressMonitor.setProcessNotStartedText("Corpus not loaded");

        indexLocationLabel.setText("Index Location: Not Loaded");

        setIndexButton.setText("Set Index");
        setIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setIndexButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexerProgressMonitor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(termSetLabel)
                            .addComponent(textFileLabel)
                            .addComponent(indexLocationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 130, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(setIndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openCorpusTextFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openCorpusTermSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFileLabel)
                    .addComponent(openCorpusTextFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openCorpusTermSet)
                    .addComponent(termSetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexLocationLabel)
                    .addComponent(setIndexButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexerProgressMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus"));
        openIndexedCorpus.setText("Open Corpus");
        openIndexedCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openIndexedCorpusActionPerformed(evt);
            }
        });

        saveIndexedCorpus.setText("Save Corpus");
        saveIndexedCorpus.setEnabled(false);
        saveIndexedCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveIndexedCorpusActionPerformed(evt);
            }
        });

        corpusDisplay.setModel(getCorpusDisplayTableModel());
        corpusDisplayScroll.setViewportView(corpusDisplay);

        corpusTotalLabel.setText("Total Contexts: 0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(corpusDisplayScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(openIndexedCorpus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveIndexedCorpus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(corpusTotalLabel)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openIndexedCorpus)
                    .addComponent(saveIndexedCorpus)
                    .addComponent(corpusTotalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(corpusDisplayScroll, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Corpus", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveIndexedCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveIndexedCorpusActionPerformed
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                oos.writeObject(corpus);
                oos.close();
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not save corpus", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveIndexedCorpusActionPerformed
    
    private void setIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setIndexButtonActionPerformed
        int oldFMS = fileChooser.getFileSelectionMode();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            fileChooser.setFileSelectionMode(oldFMS);
            fileChooser.setAcceptAllFileFilterUsed(true);
            return;
        }
        fileChooser.setFileSelectionMode(oldFMS);
        fileChooser.setAcceptAllFileFilterUsed(true);
        corpusIndexFile = fileChooser.getSelectedFile().getAbsolutePath();
        indexLocationLabel.setText("Index Location: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0&&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_setIndexButtonActionPerformed
    
    private void prepareCorpusLoader() {
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(corpusTermSetFile));
            Object o = ois.readObject();
            if(!(o instanceof Vector)) {
                JOptionPane.showMessageDialog(this, "Invalid File Format", "Could not open term set", JOptionPane.ERROR_MESSAGE);
                return;
            }
                
            corpusLoader = new CorpusLoader((Vector<String>)o, corpusTextFile, corpusIndexFile);
            indexerProgressMonitor.setProcess(corpusLoader);
            if(clProgListener == null) 
                clProgListener = new CorpusLoaderProgressListener();
            corpusLoader.addProgressListener(clProgListener);
            indexerProgressMonitor.addExtraListener(clProgListener);
            
        } catch(IOException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not initialize indexer", JOptionPane.ERROR_MESSAGE);
        } catch(ClassNotFoundException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not initialize indexer", JOptionPane.ERROR_MESSAGE);
        }
    }
  
    private class CorpusTableModel extends AbstractTableModel {
        public int getColumnCount() { return 2; }
        public int getRowCount() { return corpus == null ? 0 : corpus.terms.size(); }
        public Object getValueAt(int i, int j) {
            if(j == 0) {
                return corpus.terms.get(i);
            } else if(j == 1) {
                return corpus.getHitsForTerm(corpus.terms.get(i));
            } else {
                assert false;
                return null;
            }
        }
        public String getColumnName(int j) { 
            if(j == 0) {
                return "Term";
            } else if(j == 1) {
                return "Frequency";
            } else {
                assert false;
                return null;
            }
        }
    }
    
    private void onCorpusLoad() {
        corpusTotalLabel.setText("Total Contexts: " + corpus.getTotalDocs());
        corpusDisplayTableModel.fireTableDataChanged();
        corpusDisplay.revalidate();
        saveIndexedCorpus.setEnabled(true);
    }
    
    private void openIndexedCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openIndexedCorpusActionPerformed
        try {
            if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
                return;
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
            Object o = ois.readObject();
            if(!(o instanceof Corpus)) {
                JOptionPane.showMessageDialog(this, "Invalid Format", "Could not load corpus", JOptionPane.ERROR_MESSAGE);
                return;
            }
            corpus = (Corpus)o;
            onCorpusLoad();
        } catch(IOException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not load corpus", JOptionPane.ERROR_MESSAGE);
        } catch(ClassNotFoundException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not load corpus", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openIndexedCorpusActionPerformed
    
    private class CorpusLoaderProgressListener implements AlloeProgressListener {
        public void finished() {
            corpus = corpusLoader.corpus;
            onCorpusLoad();
        }
        public void progressChange(double newProgress) {
        }
    }
    
    private void openCorpusTermSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCorpusTermSetActionPerformed
        fileChooser.showOpenDialog(this);
        corpusTermSetFile = fileChooser.getSelectedFile().getAbsolutePath();
        termSetLabel.setText("Term Set: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0 &&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_openCorpusTermSetActionPerformed
    
    private void openCorpusTextFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCorpusTextFileActionPerformed
        fileChooser.showOpenDialog(this);
        corpusTextFile = fileChooser.getSelectedFile().getAbsolutePath();
        textFileLabel.setText("Text File: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0&&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_openCorpusTextFileActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlloeMain().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup corpusAction;
    private javax.swing.JTable corpusDisplay;
    private javax.swing.JScrollPane corpusDisplayScroll;
    private javax.swing.JLabel corpusTotalLabel;
    private javax.swing.JLabel indexLocationLabel;
    private nii.alloe.gui.ProcessMonitor indexerProgressMonitor;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton openCorpusTermSet;
    private javax.swing.JButton openCorpusTextFile;
    private javax.swing.JButton openIndexedCorpus;
    private javax.swing.JButton saveIndexedCorpus;
    private javax.swing.JButton setIndexButton;
    private javax.swing.JLabel termSetLabel;
    private javax.swing.JLabel textFileLabel;
    // End of variables declaration//GEN-END:variables

    /**
     * Holds value of property corpusDisplayTableModel.
     */
    private CorpusTableModel corpusDisplayTableModel;

    /**
     * Getter for property corpusDisplayTableModel.
     * @return Value of property corpusDisplayTableModel.
     */
    public CorpusTableModel getCorpusDisplayTableModel() {
        if(corpusDisplayTableModel != null)
            return this.corpusDisplayTableModel;
        else 
            return corpusDisplayTableModel = new CorpusTableModel();
    }

    /**
     * Setter for property corpusDisplayTableModel.
     * @param corpusDisplayTableModel New value of property corpusDisplayTableModel.
     */
    public void setCorpusDisplayTableModel(CorpusTableModel corpusDisplayTableModel) {
        this.corpusDisplayTableModel = corpusDisplayTableModel;
    }
    
}
