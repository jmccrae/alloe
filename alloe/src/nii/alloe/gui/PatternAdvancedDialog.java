/*
 * PatternAdvancedDialog.java
 *
 * Created on January 26, 2008, 6:38 AM
 */

package nii.alloe.gui;
import nii.alloe.corpus.pattern.*;
import nii.alloe.classify.*;
import javax.swing.*;

/**
 *
 * @author  john
 */
public class PatternAdvancedDialog extends javax.swing.JDialog {
    
    /** Creates new form PatternAdvancedDialog */
    public PatternAdvancedDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        ignoreReflexives = new javax.swing.JCheckBox();
        generateAll = new javax.swing.JRadioButton();
        baseOnly = new javax.swing.JRadioButton();
        useBase = new javax.swing.JRadioButton();
        basePatternLabel = new javax.swing.JLabel();
        openBasePatterns = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        noFilter = new javax.swing.JRadioButton();
        scoreFilter = new javax.swing.JRadioButton();
        scoreLabel = new javax.swing.JLabel();
        score = new javax.swing.JSpinner();
        sizeFilter = new javax.swing.JRadioButton();
        sizeLabel = new javax.swing.JLabel();
        size = new javax.swing.JSpinner();
        applySupervisedFiltering = new javax.swing.JButton();
        supervisedLabel = new javax.swing.JLabel();
        supervizedSize = new javax.swing.JLabel();
        supervisedSize = new javax.swing.JSpinner();
        filterLabel = new javax.swing.JLabel();
        filter = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pattern Builder Advanced Settings");
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Generation"));
        ignoreReflexives.setText("Ignore Reflexives");
        ignoreReflexives.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ignoreReflexives.setEnabled(false);
        ignoreReflexives.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(generateAll);
        generateAll.setSelected(true);
        generateAll.setText("Generate All");
        generateAll.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        generateAll.setEnabled(false);
        generateAll.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(baseOnly);
        baseOnly.setText("Generate Base Patterns Only");
        baseOnly.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        baseOnly.setEnabled(false);
        baseOnly.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup1.add(useBase);
        useBase.setText("Use Base Pattern Set");
        useBase.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useBase.setEnabled(false);
        useBase.setMargin(new java.awt.Insets(0, 0, 0, 0));

        basePatternLabel.setText("Base Pattern Set:");
        basePatternLabel.setEnabled(false);

        openBasePatterns.setText("Open");
        openBasePatterns.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ignoreReflexives)
                    .addComponent(generateAll)
                    .addComponent(baseOnly)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(useBase)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(basePatternLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                        .addComponent(openBasePatterns)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(ignoreReflexives)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateAll)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(baseOnly)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(useBase)
                .addContainerGap(45, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openBasePatterns)
                    .addComponent(basePatternLabel))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtering"));
        buttonGroup2.add(noFilter);
        noFilter.setSelected(true);
        noFilter.setText("No Filter");
        noFilter.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        noFilter.setEnabled(false);
        noFilter.setMargin(new java.awt.Insets(0, 0, 0, 0));

        buttonGroup2.add(scoreFilter);
        scoreFilter.setText("Filter by score");
        scoreFilter.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        scoreFilter.setEnabled(false);
        scoreFilter.setMargin(new java.awt.Insets(0, 0, 0, 0));

        scoreLabel.setText("Score greater than:");
        scoreLabel.setEnabled(false);

        score.setModel(new SpinnerNumberModel(0.0,0.0,1.0,0.0005));
        score.setEnabled(false);
        score.setValue((double)0.0);

        buttonGroup2.add(sizeFilter);
        sizeFilter.setText("Top Patterns");
        sizeFilter.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sizeFilter.setEnabled(false);
        sizeFilter.setMargin(new java.awt.Insets(0, 0, 0, 0));

        sizeLabel.setText("Pattern Set Size:");
        sizeLabel.setEnabled(false);

        size.setEnabled(false);

        applySupervisedFiltering.setText("Apply");
        applySupervisedFiltering.setEnabled(false);

        supervisedLabel.setText("Post-generation supervised filtering");
        supervisedLabel.setEnabled(false);

        supervizedSize.setText("Pattern Set Size:");
        supervizedSize.setEnabled(false);

        supervisedSize.setEnabled(false);

        filterLabel.setText("Filter:");
        filterLabel.setEnabled(false);

        filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        filter.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noFilter)
                    .addComponent(scoreFilter)
                    .addComponent(sizeFilter)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scoreLabel)
                            .addComponent(sizeLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(size)
                            .addComponent(score, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(filterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filter, 0, 142, Short.MAX_VALUE)
                        .addGap(49, 49, 49)
                        .addComponent(applySupervisedFiltering))
                    .addComponent(supervisedLabel)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(supervizedSize)
                        .addGap(24, 24, 24)
                        .addComponent(supervisedSize, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(noFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scoreFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scoreLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(sizeFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sizeLabel))
                    .addComponent(size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(applySupervisedFiltering, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(supervisedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(supervizedSize)
                            .addComponent(supervisedSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filterLabel)
                            .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatternAdvancedDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applySupervisedFiltering;
    private javax.swing.JRadioButton baseOnly;
    private javax.swing.JLabel basePatternLabel;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox filter;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JRadioButton generateAll;
    private javax.swing.JCheckBox ignoreReflexives;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton noFilter;
    private javax.swing.JButton openBasePatterns;
    private javax.swing.JSpinner score;
    private javax.swing.JRadioButton scoreFilter;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JSpinner size;
    private javax.swing.JRadioButton sizeFilter;
    private javax.swing.JLabel sizeLabel;
    private javax.swing.JLabel supervisedLabel;
    private javax.swing.JSpinner supervisedSize;
    private javax.swing.JLabel supervizedSize;
    private javax.swing.JRadioButton useBase;
    // End of variables declaration//GEN-END:variables

    /**
     * Holds value of property patternBuilder.
     */
    private PatternBuilder patternBuilder;

    /**
     * Getter for property patternBuilder.
     * @return Value of property patternBuilder.
     */
    public PatternBuilder getPatternBuilder() {
        return this.patternBuilder;
    }

    /**
     * Setter for property patternBuilder.
     * @param patternBuilder New value of property patternBuilder.
     */
    public void setPatternBuilder(PatternBuilder patternBuilder) {
        this.patternBuilder = patternBuilder;
        baseOnly.setEnabled(patternBuilder != null);
        basePatternLabel.setEnabled(patternBuilder != null);
        generateAll.setEnabled(patternBuilder != null);
        ignoreReflexives.setEnabled(patternBuilder != null);
        noFilter.setEnabled(patternBuilder != null);
        openBasePatterns.setEnabled(patternBuilder != null);
        score.setEnabled(patternBuilder != null);
        scoreFilter.setEnabled(patternBuilder != null);
        scoreLabel.setEnabled(patternBuilder != null);
        size.setEnabled(patternBuilder != null);
        sizeFilter.setEnabled(patternBuilder != null);
        sizeLabel.setEnabled(patternBuilder != null);
        useBase.setEnabled(patternBuilder != null);
    }

    /**
     * Holds value of property basePatternSet.
     */
    private PatternSet basePatternSet;

    /**
     * Getter for property basePatternSet.
     * @return Value of property basePatternSet.
     */
    public PatternSet getBasePatternSet() {
        return this.basePatternSet;
    }

    /**
     * Setter for property basePatternSet.
     * @param basePatternSet New value of property basePatternSet.
     */
    public void setBasePatternSet(PatternSet basePatternSet) {
        this.basePatternSet = basePatternSet;
    }

    /**
     * Holds value of property dataSet.
     */
    private DataSet dataSet;

    /**
     * Getter for property dataSet.
     * @return Value of property dataSet.
     */
    public DataSet getDataSet() {
        return this.dataSet;
    }

    /**
     * Setter for property dataSet.
     * @param dataSet New value of property dataSet.
     */
    public void setDataSet(DataSet dataSet) {
        this.dataSet = dataSet;
    }
    
}
