/*
 * AlloeMain.java
 *
 * Created on 09 January 2008, 16:57
 */

package nii.alloe.gui;

import javax.swing.*;
import javax.swing.table.*;
import java.io.*;
import java.util.*;
import java.text.*;
import nii.alloe.classify.*;
import nii.alloe.corpus.*;
import nii.alloe.corpus.pattern.*;
import nii.alloe.niceties.*;
import nii.alloe.theory.*;
import weka.classifiers.*;
import weka.core.*;

/**
 *
 * @author  john
 */
public class AlloeMain extends javax.swing.JFrame {
    private Corpus corpus;
    
    private String corpusTextFile;
    private String corpusTermSetFile;
    private String corpusIndexFile;
    private CorpusLoader corpusLoader;
    private JFileChooser fileChooser;
    private CorpusLoaderProgressListener clProgListener;
    private PatternGeneratorListener pbListener;
    private FeatureVectorListener fvListener;
    private HashMap<String, String> termSetFileName;
    private HashMap<String, String> fvTermSetFileName;
    private HashMap<String, PatternBuilder> patternBuilderProcess;
    private HashMap<String, FeatureVectorFormer> featureVectorProcess;
    private HashMap<String, PatternSet> patternSets;
    private DataSet dataSet;
    private Map<String,Classifier> classifierSet;
    private Logic logic;
    private ProbModelBuilder probModelBuilder;
    private Model model;
    
    private AlloeMain thisForAnon;
    
    /** Creates new form AlloeMain */
    public AlloeMain() {
        initComponents();
        corpusTextFile = corpusTermSetFile = corpusIndexFile = "";
        fileChooser = new JFileChooser();
        thisForAnon = this;
        corpusDisplayTableModel = new CorpusTableModel();
        termSetFileName = new HashMap<String,String>();
        fvTermSetFileName = new HashMap<String,String>();
        patternBuilderProcess = new HashMap<String,PatternBuilder>();
        featureVectorProcess = new HashMap<String,FeatureVectorFormer>();
        patternSets = new HashMap<String,PatternSet>();
        classifierSet = new HashMap<String,Classifier>();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        corpusAction = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        openCorpusTextFile = new javax.swing.JButton();
        openCorpusTermSet = new javax.swing.JButton();
        textFileLabel = new javax.swing.JLabel();
        termSetLabel = new javax.swing.JLabel();
        indexerProgressMonitor = new nii.alloe.gui.ProcessMonitor();
        if(clProgListener == null)
        clProgListener = new CorpusLoaderProgressListener();
        indexerProgressMonitor.addExtraListener(clProgListener);
        indexLocationLabel = new javax.swing.JLabel();
        setIndexButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        openIndexedCorpus = new javax.swing.JButton();
        saveIndexedCorpus = new javax.swing.JButton();
        corpusDisplayScroll = new javax.swing.JScrollPane();
        corpusDisplay = new javax.swing.JTable();
        corpusTotalLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        termPairSetLabel = new javax.swing.JLabel();
        openTermPairSet = new javax.swing.JButton();
        patternGeneratorRelationship = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        patternGeneratorProgressMonitor = new nii.alloe.gui.ProcessMonitor();
        if(pbListener == null)
        pbListener = new PatternGeneratorListener();
        patternGeneratorProgressMonitor.addExtraListener(pbListener);
        patternBuilderMetric = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        patternViewerRelationshipLabel = new javax.swing.JLabel();
        patternViewerRelationship = new javax.swing.JComboBox();
        openPatternSet = new javax.swing.JButton();
        savePatternSet = new javax.swing.JButton();
        totalPatternsLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        patternTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        featureVectorPatternSet = new javax.swing.JComboBox();
        openDataSet = new javax.swing.JButton();
        saveDataSet = new javax.swing.JButton();
        featureVectorFormerMonitor = new nii.alloe.gui.ProcessMonitor();
        featureVectorFormerMonitor.addProcessMonitorListener(new FVPMListener());
        featureVectorTermPairLabel = new javax.swing.JLabel();
        featureOpenTermPairs = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        featureVectorRelationship = new javax.swing.JTextField();
        isTrainingCheck = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        wekaOutput = new javax.swing.JTextArea();
        classifier = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        classifierParameters = new javax.swing.JTextField();
        saveClassifierButton = new javax.swing.JButton();
        openClassifierButton = new javax.swing.JButton();
        startTrainingButton = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        probModelBuilderMonitor = new nii.alloe.gui.ProcessMonitor();
        logicLabel = new javax.swing.JLabel();
        openLogic = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        logicConnectionTable = new javax.swing.JTable();
        modelRelationship = new javax.swing.JComboBox();
        saveModel = new javax.swing.JButton();
        openModel = new javax.swing.JButton();
        modelRelationShipLabel = new javax.swing.JLabel();
        visualizeModel = new javax.swing.JButton();
        modelLinksLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        logicDescription = new javax.swing.JTextArea();
        saveLogicButton = new javax.swing.JButton();
        processLogicButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Alloe");
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus Indexer"));
        openCorpusTextFile.setText("Open Text File");
        openCorpusTextFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCorpusTextFileActionPerformed(evt);
            }
        });

        openCorpusTermSet.setText("Open Term Set");
        openCorpusTermSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openCorpusTermSetActionPerformed(evt);
            }
        });

        textFileLabel.setText("Text File: Not Loaded");

        termSetLabel.setText("Term Set: Not Loaded");

        indexerProgressMonitor.setProcessCompletedText("Corpus loaded");
        indexerProgressMonitor.setProcessNotStartedText("Corpus not loaded");

        indexLocationLabel.setText("Index Location: Not Loaded");

        setIndexButton.setText("Set Index");
        setIndexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setIndexButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(indexerProgressMonitor, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(termSetLabel)
                            .addComponent(textFileLabel)
                            .addComponent(indexLocationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 161, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(setIndexButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openCorpusTextFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(openCorpusTermSet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textFileLabel)
                    .addComponent(openCorpusTextFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openCorpusTermSet)
                    .addComponent(termSetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(indexLocationLabel)
                    .addComponent(setIndexButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(indexerProgressMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Corpus"));
        openIndexedCorpus.setText("Open Corpus");
        openIndexedCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openIndexedCorpusActionPerformed(evt);
            }
        });

        saveIndexedCorpus.setText("Save Corpus");
        saveIndexedCorpus.setEnabled(false);
        saveIndexedCorpus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveIndexedCorpusActionPerformed(evt);
            }
        });

        corpusDisplay.setAutoCreateRowSorter(true);
        corpusDisplay.setModel(getCorpusDisplayTableModel());
        corpusDisplayScroll.setViewportView(corpusDisplay);

        corpusTotalLabel.setText("Total Contexts: 0");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(corpusDisplayScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 456, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(openIndexedCorpus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveIndexedCorpus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(corpusTotalLabel)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openIndexedCorpus)
                    .addComponent(saveIndexedCorpus)
                    .addComponent(corpusTotalLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(corpusDisplayScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Corpus", jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder("Generate Patterns"));
        termPairSetLabel.setText("Term Pair Set:");
        termPairSetLabel.setEnabled(false);

        openTermPairSet.setText("Open Term Pair Set");
        openTermPairSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openTermPairSetActionPerformed(evt);
            }
        });

        patternGeneratorRelationship.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "New..." }));
        patternGeneratorRelationship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternGeneratorRelationshipActionPerformed(evt);
            }
        });

        jLabel2.setText("Relationship:");

        patternGeneratorProgressMonitor.setProcessCompletedText("Pattern Set Generated");
        patternGeneratorProgressMonitor.setProcessNotStartedText("Ready");

        patternBuilderMetric.setModel(new DefaultComboBoxModel(PatternMetricFactory.getPatternMetrics()));
        patternBuilderMetric.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternBuilderMetricActionPerformed(evt);
            }
        });

        jLabel3.setText("Metric::");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(patternGeneratorProgressMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternGeneratorRelationship, 0, 353, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(termPairSetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 208, Short.MAX_VALUE)
                        .addComponent(openTermPairSet))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternBuilderMetric, 0, 390, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(patternGeneratorRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(termPairSetLabel)
                    .addComponent(openTermPairSet))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(patternBuilderMetric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patternGeneratorProgressMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder("Pattern Sets"));
        patternViewerRelationshipLabel.setText("Relationship:");
        patternViewerRelationshipLabel.setEnabled(false);

        patternViewerRelationship.setEnabled(false);
        patternViewerRelationship.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patternViewerRelationshipActionPerformed(evt);
            }
        });

        openPatternSet.setText("Open Pattern Set");
        openPatternSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openPatternSetActionPerformed(evt);
            }
        });

        savePatternSet.setText("Save Pattern Set");
        savePatternSet.setEnabled(false);
        savePatternSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePatternSetActionPerformed(evt);
            }
        });

        totalPatternsLabel.setText("Total Patterns:");

        patternTable.setAutoCreateRowSorter(true);
        patternTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Pattern", "Score"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(patternTable);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(patternViewerRelationshipLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patternViewerRelationship, 0, 353, Short.MAX_VALUE))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(openPatternSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(savePatternSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalPatternsLabel)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(patternViewerRelationshipLabel)
                    .addComponent(patternViewerRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openPatternSet)
                    .addComponent(savePatternSet)
                    .addComponent(totalPatternsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 245, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Patterns", jPanel2);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder("Feature Vector Former"));
        jLabel1.setText("Pattern Set:");

        featureVectorPatternSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                featureVectorPatternSetActionPerformed(evt);
            }
        });

        openDataSet.setText("Open Vectors");
        openDataSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openDataSetActionPerformed(evt);
            }
        });

        saveDataSet.setText("Save Vectors");
        saveDataSet.setEnabled(false);
        saveDataSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveDataSetActionPerformed(evt);
            }
        });

        featureVectorFormerMonitor.setProcessCompletedText("Feature Vectors Loaded");
        featureVectorFormerMonitor.setProcessNotStartedText("Feature Vectors not Loaded");

        featureVectorTermPairLabel.setText("Term Pair Set:");

        featureOpenTermPairs.setText("Open Term Pair Set");
        featureOpenTermPairs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                featureOpenTermPairsActionPerformed(evt);
            }
        });

        jLabel4.setText("Relationship:");

        isTrainingCheck.setSelected(true);
        isTrainingCheck.setText("Training");
        isTrainingCheck.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        isTrainingCheck.setMargin(new java.awt.Insets(0, 0, 0, 0));
        isTrainingCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isTrainingCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(featureVectorFormerMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(23, 23, 23)
                        .addComponent(featureVectorPatternSet, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openDataSet)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveDataSet))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featureVectorRelationship, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(isTrainingCheck))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(featureVectorTermPairLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 229, Short.MAX_VALUE)
                        .addComponent(featureOpenTermPairs)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(openDataSet)
                    .addComponent(saveDataSet)
                    .addComponent(featureVectorPatternSet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(isTrainingCheck)
                    .addComponent(featureVectorRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(featureOpenTermPairs)
                    .addComponent(featureVectorTermPairLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(featureVectorFormerMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Train Classifier"));
        wekaOutput.setColumns(20);
        wekaOutput.setEditable(false);
        wekaOutput.setRows(5);
        wekaOutput.setToolTipText("WEKA Output");
        jScrollPane2.setViewportView(wekaOutput);

        classifier.setModel(new DefaultComboBoxModel(getClassifierNames()));
        classifier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifierActionPerformed(evt);
            }
        });

        jLabel5.setText("Classifier:");

        jLabel6.setText("Parameters:");

        saveClassifierButton.setText("Save Classifier");
        saveClassifierButton.setEnabled(false);
        saveClassifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveClassifierButtonActionPerformed(evt);
            }
        });

        openClassifierButton.setText("Open Classifier");
        openClassifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openClassifierButtonActionPerformed(evt);
            }
        });

        startTrainingButton.setText("Start Training");
        startTrainingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startTrainingButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classifier, 0, 130, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(classifierParameters, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(startTrainingButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 87, Short.MAX_VALUE)
                        .addComponent(openClassifierButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveClassifierButton)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(classifierParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(classifier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveClassifierButton)
                    .addComponent(openClassifierButton)
                    .addComponent(startTrainingButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jTabbedPane1.addTab("Classification", jPanel3);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Create Model"));
        probModelBuilderMonitor.addExtraListener(new ModelProcessListener());

        logicLabel.setText("Logic");

        openLogic.setText("Open Logic");
        openLogic.setToolTipText("Open a logic from a file");
        openLogic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openLogicActionPerformed(evt);
            }
        });

        logicConnectionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Logic Relation", "Feature Vector", "Classifier"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(logicConnectionTable);

        modelRelationship.setEnabled(false);

        saveModel.setText("Save Model");
        saveModel.setEnabled(false);

        openModel.setText("Open Model");

        modelRelationShipLabel.setText("Relationship:");
        modelRelationShipLabel.setEnabled(false);

        visualizeModel.setText("Visualize");
        visualizeModel.setEnabled(false);

        modelLinksLabel.setText("Model Links:");
        modelLinksLabel.setEnabled(false);

        logicDescription.setColumns(20);
        logicDescription.setRows(5);
        jScrollPane4.setViewportView(logicDescription);

        saveLogicButton.setText("Save Logic");

        processLogicButton.setText("Process Logic");
        processLogicButton.setToolTipText("Load the logic as above");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(logicLabel)
                        .addGap(459, 459, 459))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(processLogicButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(openLogic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveLogicButton)
                        .addContainerGap())
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addComponent(modelLinksLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 311, Short.MAX_VALUE)
                                .addComponent(visualizeModel))
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(modelRelationShipLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modelRelationship, 0, 387, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addComponent(probModelBuilderMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(openModel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveModel)
                        .addContainerGap())))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(logicLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveLogicButton)
                    .addComponent(openLogic)
                    .addComponent(processLogicButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(probModelBuilderMonitor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modelRelationShipLabel)
                    .addComponent(modelRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(visualizeModel)
                    .addComponent(modelLinksLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveModel)
                    .addComponent(openModel))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("Model", jPanel11);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 514, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 558, Short.MAX_VALUE)
        );
        jTabbedPane1.addTab("Consistency", jPanel12);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 585, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void initProbModelBuilder() {
        HashMap<String,Classifier> classifs = new HashMap<String,Classifier>(logic.relationNames.keySet().size());
        HashMap<String,String> dataSetToLogicName = new HashMap<String,String>(logic.relationNames.keySet().size());
        for(int i = 0; i < logicConnectionTable.getModel().getRowCount(); i++) {
            classifs.put(logicConnectionTable.getModel().getValueAt(i,1).toString(),
                    classifierSet.get(logicConnectionTable.getModel().getValueAt(i,2).toString()));
            dataSetToLogicName.put(logicConnectionTable.getModel().getValueAt(i,1).toString(),
                    logicConnectionTable.getModel().getValueAt(i,0).toString());
        }
        probModelBuilder.setClassifiers(classifs);
        probModelBuilder.setDataSetToLogicName(dataSetToLogicName);
    }
    
    private void onModelLoad() {
        modelRelationShipLabel.setEnabled(true);
        modelRelationship.setModel(new DefaultComboBoxModel(model.getGraphNames()));
        modelRelationship.setSelectedIndex(0);
        modelRelationship.setEnabled(true);
        String graphName = modelRelationship.getSelectedItem().toString();
        Graph graph = model.getGraphByName(graphName);
        modelLinksLabel.setText("Model Links: " + graph.linkCount());
        modelLinksLabel.setEnabled(true);
        visualizeModel.setEnabled(true); // TODO change to is JGraph in classpath
        saveModel.setEnabled(true);
    }
    
    private class ModelProcessListener implements AlloeProgressListener {
        public void finished() {
            model = probModelBuilder.model;
            onModelLoad();
        }

        public void progressChange(double newProgress) {
        }
    }
    
    private class ModelPMListener implements ProcessMonitorListener {
        public boolean onStart(ProcessMonitor pm) {
            initProbModelBuilder();
            return true;
        }

        public boolean onResume(ProcessMonitor pm) {
            probModelBuilder = (ProbModelBuilder)pm.getProcess();
            return true;
        }
    }
    
    private void isTrainingCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isTrainingCheckActionPerformed
        
    }//GEN-LAST:event_isTrainingCheckActionPerformed
    
    private void openLogicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openLogicActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                logic = new Logic(fileChooser.getSelectedFile().getAbsolutePath());
            } catch(IllegalArgumentException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open logic file", JOptionPane.ERROR_MESSAGE);
                return;
            }
            TableColumn fvCol = logicConnectionTable.getColumnModel().getColumn(1);
            JComboBox fvCombo = new JComboBox();
            Iterator<String> fviter = dataSet.instances.keySet().iterator();
            String defFV = "";
            while(fviter.hasNext()) {
                defFV = fviter.next();
                fvCombo.addItem(defFV);
            }
            fvCol.setCellEditor(new DefaultCellEditor(fvCombo));
            
            TableColumn clCol = logicConnectionTable.getColumnModel().getColumn(2);
            JComboBox clCombo = new JComboBox();
            Iterator<String> cliter = classifierSet.keySet().iterator();
            String defCl = "";
            while(cliter.hasNext()) {
                defCl = cliter.next();
                clCombo.addItem(defCl);
            }
            clCol.setCellEditor(new DefaultCellEditor(clCombo));
            
            Iterator<String> relIter = logic.relationNames.keySet().iterator();
            DefaultTableModel dtm = (DefaultTableModel)logicConnectionTable.getModel();
            while(dtm.getRowCount() > 0)
                dtm.removeRow(0);
            while(relIter.hasNext()) {
                Object[] os = new Object[3];
                os[0] = relIter.next();
                os[1] = dataSet.instances.containsKey(os[0]) ? os[0] : defFV;
                os[2] = classifierSet.containsKey(os[0]) ? os[0] : defCl;
                dtm.addRow(os);
            }
            probModelBuilder = new ProbModelBuilder(logic,dataSet,null,null);
            probModelBuilder.addProgressListener(new ModelProcessListener());
            probModelBuilderMonitor.setProcess(probModelBuilder);
            initProbModelBuilder();
            probModelBuilderMonitor.addProcessMonitorListener(new ModelPMListener());
        }
    }//GEN-LAST:event_openLogicActionPerformed
    
    private void saveClassifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveClassifierButtonActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                oos.writeObject(classifierSet);
                oos.close();
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not save classifier set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveClassifierButtonActionPerformed
    
    private void openClassifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openClassifierButtonActionPerformed
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
                Object o = ois.readObject();
                if(!(o instanceof Map)) {
                    JOptionPane.showMessageDialog(this,"Invalid Format", "Could not open classifier set",JOptionPane.ERROR_MESSAGE);
                    return;
                }
                classifierSet = (Map<String,Classifier>)o;
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open classifier set", JOptionPane.ERROR_MESSAGE);
            } catch(ClassNotFoundException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open classifier set", JOptionPane.ERROR_MESSAGE);
            }
        }
        
    }//GEN-LAST:event_openClassifierButtonActionPerformed
    
    private void startTrainingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startTrainingButtonActionPerformed
        try {
            Iterator<Map.Entry<String,Instances>> ei = dataSet.instances.entrySet().iterator();
            while(ei.hasNext()) {
                Map.Entry<String,Instances> ei2 = ei.next();
                String relationship = ei2.getKey();
                if(!dataSet.isTraining(relationship))
                    continue;
                Instances instances = ei2.getValue();
                instances.setClassIndex(instances.numAttributes()-1);
                String[] opts = new String[1];
                opts[0] = classifierParameters.getText();
                String s = classifier.getSelectedItem().toString();
                Classifier c = Classifier.forName(classifierNameToFullName.get(classifier.getSelectedItem().toString()),
                        opts);
                wekaOutput.append("Building classifier for relationship: " + relationship);
                c.buildClassifier(instances);
                wekaOutput.append(" ...OK!\n");
                wekaOutput.append(c.toString());
                classifierSet.put(relationship,c);
            }
            saveClassifierButton.setEnabled(true);
        } catch(Exception x) {
            x.printStackTrace();
        }
    }//GEN-LAST:event_startTrainingButtonActionPerformed
    
    private void classifierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifierActionPerformed
        if(classifier.getSelectedItem().toString().equals("Other")) {
            String displayName = JOptionPane.showInputDialog(this,"Enter Display Name");
            if(displayName == null)
                return;
            // TODO destroy duplication
            String className = "";
            boolean classOK = false;
            while(className != null && !classOK) {
                className = JOptionPane.showInputDialog(this,"Enter Class Name");
                
                if(className == null)
                    return;
                try {
                    classOK = weka.classifiers.Classifier.class.isAssignableFrom(Class.forName(className));
                } catch(ClassNotFoundException x) {
                    classOK = false;
                }
                
                if(!classOK) {
                    JOptionPane.showMessageDialog(this,"Please enter a class name. Example: \"weka.classifiers.bayes.NaiveBayes\"","Invalid classifier name or classifier not found", JOptionPane.ERROR_MESSAGE);
                }
            }
            if(className != null) {
                classifierNameToFullName.put(displayName,className);
                DefaultComboBoxModel dcbm = (DefaultComboBoxModel)classifier.getModel();
                dcbm.insertElementAt(displayName,dcbm.getIndexOf("Other"));
                classifier.setSelectedItem(displayName);
            }
        }
        classifierParameters.setText("");
    }//GEN-LAST:event_classifierActionPerformed
    
    private void saveDataSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDataSetActionPerformed
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                oos.writeObject(dataSet);
                oos.close();
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not save data set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveDataSetActionPerformed
    
    private void openDataSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openDataSetActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
                Object o = ois.readObject();
                if(!(o instanceof DataSet)) {
                    JOptionPane.showMessageDialog(this, "Invalid Format", "Could not open data set", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                dataSet = (DataSet)o;
                featureVectorPatternSet.setModel(new DefaultComboBoxModel(dataSet.instances.keySet().toArray()));
                saveDataSet.setEnabled(true);
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open data set", JOptionPane.ERROR_MESSAGE);
            } catch(ClassNotFoundException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open data set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openDataSetActionPerformed
    
    private class FeatureVectorListener implements AlloeProgressListener {
        public void progressChange(double newProgress) {
            
        }
        
        
        public void finished() {
            saveDataSet.setEnabled(true);
        }
    }
    
    private class FVPMListener implements ProcessMonitorListener {
        public boolean onStart(ProcessMonitor pm) {
            return initFeatureVectorProcess(featureVectorPatternSet.getSelectedItem().toString(),
                    featureVectorRelationship.getText());
        }
        
        public boolean onResume(ProcessMonitor pm) {
            return true;
        }
        
    }
    
    private boolean initFeatureVectorProcess(String pat, String rel) {
        try {
            ObjectInputStream ios = new ObjectInputStream(new FileInputStream(fvTermSetFileName.get(rel)));
            Object o = ios.readObject();
            if(!(o instanceof TermPairSet)) {
                JOptionPane.showMessageDialog(this, "Invalid format", "Could not open term set", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            FeatureVectorFormer fvf = new FeatureVectorFormer(rel,patternSets.get(pat),corpus,(TermPairSet)o);
            fvf.dataSet = dataSet;
            featureVectorProcess.put(rel,fvf);
            if(fvListener == null)
                fvListener = new FeatureVectorListener();
            fvf.addProgressListener(fvListener);
            featureVectorFormerMonitor.setProcess(fvf);
            dataSet.setTraining(rel,isTrainingCheck.isSelected());
            return true;
        } catch(IOException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open term set", JOptionPane.ERROR_MESSAGE);
            return false;
        } catch(ClassNotFoundException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open term set", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
    }
    
    private void featureOpenTermPairsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_featureOpenTermPairsActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            String pat = featureVectorPatternSet.getSelectedItem().toString();
            String rel = featureVectorRelationship.getText();
            fvTermSetFileName.put(rel,
                    fileChooser.getSelectedFile().getAbsolutePath());
            featureVectorTermPairLabel.setText("Term Pair Set: " + fileChooser.getSelectedFile().getPath());
            if(corpus != null && patternSets.get(pat) != null) {
                initFeatureVectorProcess(pat,rel);
            }
        }
    }//GEN-LAST:event_featureOpenTermPairsActionPerformed
    
    private void featureVectorPatternSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_featureVectorPatternSetActionPerformed
        featureVectorRelationship.setText(featureVectorPatternSet.getSelectedItem().toString());
    }//GEN-LAST:event_featureVectorPatternSetActionPerformed
    
    private HashMap<String,String> classifierNameToFullName;
    
    public Vector<String> getClassifierNames() {
        Vector<String> r = new Vector<String>(9);
        classifierNameToFullName = new HashMap<String,String>(8);
        classifierNameToFullName.put("Bayesian Network","weka.classifiers.bayes.BayesNet");
        classifierNameToFullName.put("Decision Tree","weka.classifiers.trees.J48");
        classifierNameToFullName.put("Rule Learner","weka.classifiers.rules.JRip");
        classifierNameToFullName.put("Linear Regression","weka.classifiers.functions.LinearRegression");
        classifierNameToFullName.put("Multilayer Perceptron","weka.classifiers.functions.MultilayerPerceptron");
        classifierNameToFullName.put("Naive Bayes","weka.classifiers.bayes.NaiveBayes");
        classifierNameToFullName.put("SVM","weka.classifiers.functions.SMO");
        classifierNameToFullName.put("SVM Regression","weka.classifiers.functions.SMOreg");
        
        r.add("SVM Regression");
        r.add("SVM");
        r.add("Naive Bayes");
        r.add("Bayesian Network");
        r.add("Multilayer Perceptron");
        r.add("Linear Regression");
        r.add("Rule Learner");
        r.add("Decision Tree");
        r.add("Other");
        
        return r;
    }
    
    
    private void patternViewerRelationshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternViewerRelationshipActionPerformed
        onPatternSetLoad(patternViewerRelationship.getSelectedItem().toString(),false);
    }//GEN-LAST:event_patternViewerRelationshipActionPerformed
    
    private void onPatternSetLoad(String relationship) { onPatternSetLoad(relationship,true); }
    private void onPatternSetLoad(String relationship, boolean select) {
        DefaultComboBoxModel dcbm = (DefaultComboBoxModel)patternViewerRelationship.getModel();
        if(dcbm.getIndexOf(relationship) == -1) {
            dcbm.addElement(relationship);
        }
        dcbm = (DefaultComboBoxModel)featureVectorPatternSet.getModel();
        if(dcbm.getIndexOf(relationship) == -1) {
            dcbm.addElement(relationship);
        }
        if(select)
            patternViewerRelationship.setSelectedItem(relationship);
        patternViewerRelationship.setEnabled(true);
        patternViewerRelationshipLabel.setEnabled(true);
        savePatternSet.setEnabled(true);
        PatternSet ps = patternSets.get(relationship);
        if(ps == null)
            return;
        
        totalPatternsLabel.setText("Total Patterns: " + ps.size());
        
        DefaultTableModel dtm = (DefaultTableModel)patternTable.getModel();
        Object[][] o = new Object[ps.size()][2];
        DecimalFormat df = new DecimalFormat("0.00000000");
        Iterator<Map.Entry<Pattern,Double>> iter = ps.entrySet().iterator();
        int i = 0;
        while(iter.hasNext()) {
            Map.Entry<Pattern,Double> e = iter.next();
            o[i][0] = e.getKey().toString();
            o[i++][1] = df.format(e.getValue().doubleValue());
        }
        String [] s = { "Pattern", "Score" };
        dtm.setDataVector(o,s);
    }
    
    private class PatternGeneratorListener implements PatternBuilderListener {
        private String getRelationship() { return ((PatternBuilder)patternGeneratorProgressMonitor.getProcess()).getRelationship(); }
        
        /** Called whenever progress is made
         * @param newProgress The new progress percentage (as double between 0 and 1) */
        public void progressChange(double newProgress) {}
        
        /** Called when the process finishes */
        public void finished() {
            patternSets.put(getRelationship(), patternBuilderProcess.get(getRelationship()).patternScores);
            onPatternSetLoad(getRelationship()); }
        
        public void patternGenerated(Pattern p, double score) {
            if(patternViewerRelationship.getSelectedItem().toString().equals(getRelationship())) {
                DefaultTableModel dtm = (DefaultTableModel)patternTable.getModel();
                Object[] row = new Object[2];
                row[0] = p.toString();
                NumberFormat df = new DecimalFormat("0.00000000");
                row[1] = df.format(score);
                dtm.addRow(row);
                totalPatternsLabel.setText("Total Patterns: " + patternBuilderProcess.get(getRelationship()).patternScores.size());
            }
        }
    }
    
    private void savePatternSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePatternSetActionPerformed
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                oos.writeObject(patternSets.get(patternViewerRelationship.getSelectedItem().toString()));
                oos.close();
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not save pattern set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_savePatternSetActionPerformed
    
    private void openPatternSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openPatternSetActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
                Object o = ois.readObject();
                if(!(o instanceof PatternSet)) {
                    JOptionPane.showMessageDialog(this, "Invalid format", "Could not open pattern set", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                PatternSet ps = (PatternSet)o;
                if(ps.getRelationship() == null) {
                    throw new NullPointerException();
                }
                patternSets.put(ps.getRelationship(),ps);
                onPatternSetLoad(ps.getRelationship());
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open pattern set", JOptionPane.ERROR_MESSAGE);
            } catch(ClassNotFoundException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open pattern set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openPatternSetActionPerformed
    
    private void patternBuilderMetricActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternBuilderMetricActionPerformed
        PatternBuilder pb = patternBuilderProcess.get(patternGeneratorRelationship.getSelectedItem().toString());
        if(pb != null && !pb.isRunning()) {
            pb.setPatternMetric(patternBuilderMetric.getSelectedItem().toString());
        }
    }//GEN-LAST:event_patternBuilderMetricActionPerformed
    
    private void initPatternBuilderProcess(String name) {
        if(!patternBuilderProcess.containsKey(name)) {
            try {
                ObjectInputStream ios = new ObjectInputStream(new FileInputStream(termSetFileName.get(name)));
                Object o = ios.readObject();
                if(!(o instanceof TermPairSet)) {
                    JOptionPane.showMessageDialog(this, "Invalid format", "Could not open term set", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                PatternBuilder pb =  new PatternBuilder(corpus, (TermPairSet)o,
                        (String)patternBuilderMetric.getSelectedItem(), name);
                patternBuilderProcess.put(name,pb);
                if(pbListener == null)
                    pbListener = new PatternGeneratorListener();
                pb.addProgressListener(pbListener);
                patternGeneratorProgressMonitor.setProcess(pb);
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open term set", JOptionPane.ERROR_MESSAGE);
            } catch(ClassNotFoundException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not open term set", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private void openTermPairSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openTermPairSetActionPerformed
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            termSetFileName.put(patternGeneratorRelationship.getSelectedItem().toString(),
                    fileChooser.getSelectedFile().getAbsolutePath());
            termPairSetLabel.setText("Term Pair Set: " + fileChooser.getSelectedFile().getPath());
            if(corpus != null) {
                initPatternBuilderProcess(patternGeneratorRelationship.getSelectedItem().toString());
            }
        }
    }//GEN-LAST:event_openTermPairSetActionPerformed
    
    private void patternGeneratorRelationshipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patternGeneratorRelationshipActionPerformed
        if(patternGeneratorRelationship.getSelectedItem().equals("New...")) {
            String name = JOptionPane.showInputDialog(this, "New Relation", "");
            ((DefaultComboBoxModel)patternGeneratorRelationship.getModel()).insertElementAt(name,0);
            ((DefaultComboBoxModel)patternViewerRelationship.getModel()).insertElementAt(name,0);
            ((DefaultComboBoxModel)featureVectorPatternSet.getModel()).insertElementAt(name,0);
            if(patternGeneratorRelationship.getItemAt(1).equals("")) {
                patternGeneratorRelationship.removeItemAt(1);
            }
            
            patternGeneratorRelationship.setSelectedItem(name);
            patternViewerRelationship.setSelectedItem(name);
        }
        
        termPairSetLabel.setEnabled(true);
        String s = termSetFileName.get(patternGeneratorRelationship.getSelectedItem().toString());
        termPairSetLabel.setText("Term Pair Set: " + (s == null ? "" : s));
        openTermPairSet.setEnabled(true);
        PatternBuilder pb = (PatternBuilder)patternGeneratorProgressMonitor.getProcess();
        if(pb == null || !pb.isRunning())
            patternGeneratorProgressMonitor.setProcess(patternBuilderProcess.get(patternGeneratorRelationship.getSelectedItem().toString()));
        
    }//GEN-LAST:event_patternGeneratorRelationshipActionPerformed
    
    private void saveIndexedCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveIndexedCorpusActionPerformed
        if(fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(fileChooser.getSelectedFile()));
                oos.writeObject(corpus);
                oos.close();
            } catch(IOException x) {
                JOptionPane.showMessageDialog(this, x.getMessage(), "Could not save corpus", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveIndexedCorpusActionPerformed
    
    private void setIndexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setIndexButtonActionPerformed
        int oldFMS = fileChooser.getFileSelectionMode();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setAcceptAllFileFilterUsed(false);
        if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
            fileChooser.setFileSelectionMode(oldFMS);
            fileChooser.setAcceptAllFileFilterUsed(true);
            return;
        }
        fileChooser.setFileSelectionMode(oldFMS);
        fileChooser.setAcceptAllFileFilterUsed(true);
        corpusIndexFile = fileChooser.getSelectedFile().getAbsolutePath();
        indexLocationLabel.setText("Index Location: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0&&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_setIndexButtonActionPerformed
    
    private void prepareCorpusLoader() {
        try {
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(corpusTermSetFile));
            Object o = ois.readObject();
            if(!(o instanceof TermList)) {
                JOptionPane.showMessageDialog(this, "Invalid File Format", "Could not open term set", JOptionPane.ERROR_MESSAGE);
                return;
            }
            
            corpusLoader = new CorpusLoader((TermList)o, corpusTextFile, corpusIndexFile);
            indexerProgressMonitor.setProcess(corpusLoader);
            if(clProgListener == null)
                clProgListener = new CorpusLoaderProgressListener();
            corpusLoader.addProgressListener(clProgListener);
            
        } catch(IOException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not initialize indexer", JOptionPane.ERROR_MESSAGE);
        } catch(ClassNotFoundException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not initialize indexer", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private class CorpusTableModel extends AbstractTableModel {
        public int getColumnCount() { return 2; }
        public int getRowCount() { return corpus == null ? 0 : corpus.terms.size(); }
        public Object getValueAt(int i, int j) {
            if(j == 0) {
                return corpus.terms.get(i);
            } else if(j == 1) {
                return corpus.getHitsForTerm(corpus.terms.get(i));
            } else {
                assert false;
                return null;
            }
        }
        public String getColumnName(int j) {
            if(j == 0) {
                return "Term";
            } else if(j == 1) {
                return "Frequency";
            } else {
                assert false;
                return null;
            }
        }
        
        public Class getColumnClass(int j) {
            if(j == 0)
                return String.class;
            if(j == 1)
                return Integer.class;
            else
                return null;
        }
    }
    
    private void onCorpusLoad() {
        corpusTotalLabel.setText("Total Contexts: " + corpus.getTotalDocs());
        corpusDisplayTableModel.fireTableDataChanged();
        corpusDisplay.revalidate();
        saveIndexedCorpus.setEnabled(true);
        dataSet = new DataSet(corpus.terms);
    }
    
    private void openIndexedCorpusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openIndexedCorpusActionPerformed
        try {
            if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
                return;
            ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileChooser.getSelectedFile()));
            Object o = ois.readObject();
            if(!(o instanceof Corpus)) {
                JOptionPane.showMessageDialog(this, "Invalid Format", "Could not load corpus", JOptionPane.ERROR_MESSAGE);
                return;
            }
            corpus = (Corpus)o;
            onCorpusLoad();
        } catch(IOException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not load corpus", JOptionPane.ERROR_MESSAGE);
        } catch(ClassNotFoundException x) {
            JOptionPane.showMessageDialog(this, x.getMessage(), "Could not load corpus", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_openIndexedCorpusActionPerformed
    
    private class CorpusLoaderProgressListener implements AlloeProgressListener {
        public void finished() {
            //corpus = corpusLoader.corpus;
            AlloeProcess p = indexerProgressMonitor.getProcess();
            assert p instanceof CorpusLoader;
            corpus = ((CorpusLoader)p).corpus;
            onCorpusLoad();
        }
        public void progressChange(double newProgress) {
        }
    }
    
    private void openCorpusTermSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCorpusTermSetActionPerformed
        if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        corpusTermSetFile = fileChooser.getSelectedFile().getAbsolutePath();
        termSetLabel.setText("Term Set: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0 &&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_openCorpusTermSetActionPerformed
    
    private void openCorpusTextFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openCorpusTextFileActionPerformed
        if(fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION)
            return;
        corpusTextFile = fileChooser.getSelectedFile().getAbsolutePath();
        textFileLabel.setText("Text File: " + fileChooser.getSelectedFile().getPath());
        if(corpusTextFile.length() > 0 && corpusTermSetFile.length() > 0&&
                corpusIndexFile.length() > 0) {
            prepareCorpusLoader();
        }
    }//GEN-LAST:event_openCorpusTextFileActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlloeMain().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox classifier;
    private javax.swing.JTextField classifierParameters;
    private javax.swing.ButtonGroup corpusAction;
    private javax.swing.JTable corpusDisplay;
    private javax.swing.JScrollPane corpusDisplayScroll;
    private javax.swing.JLabel corpusTotalLabel;
    private javax.swing.JButton featureOpenTermPairs;
    private nii.alloe.gui.ProcessMonitor featureVectorFormerMonitor;
    private javax.swing.JComboBox featureVectorPatternSet;
    private javax.swing.JTextField featureVectorRelationship;
    private javax.swing.JLabel featureVectorTermPairLabel;
    private javax.swing.JLabel indexLocationLabel;
    private nii.alloe.gui.ProcessMonitor indexerProgressMonitor;
    private javax.swing.JCheckBox isTrainingCheck;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable logicConnectionTable;
    private javax.swing.JTextArea logicDescription;
    private javax.swing.JLabel logicLabel;
    private javax.swing.JLabel modelLinksLabel;
    private javax.swing.JLabel modelRelationShipLabel;
    private javax.swing.JComboBox modelRelationship;
    private javax.swing.JButton openClassifierButton;
    private javax.swing.JButton openCorpusTermSet;
    private javax.swing.JButton openCorpusTextFile;
    private javax.swing.JButton openDataSet;
    private javax.swing.JButton openIndexedCorpus;
    private javax.swing.JButton openLogic;
    private javax.swing.JButton openModel;
    private javax.swing.JButton openPatternSet;
    private javax.swing.JButton openTermPairSet;
    private javax.swing.JComboBox patternBuilderMetric;
    private nii.alloe.gui.ProcessMonitor patternGeneratorProgressMonitor;
    private javax.swing.JComboBox patternGeneratorRelationship;
    private javax.swing.JTable patternTable;
    private javax.swing.JComboBox patternViewerRelationship;
    private javax.swing.JLabel patternViewerRelationshipLabel;
    private nii.alloe.gui.ProcessMonitor probModelBuilderMonitor;
    private javax.swing.JButton processLogicButton;
    private javax.swing.JButton saveClassifierButton;
    private javax.swing.JButton saveDataSet;
    private javax.swing.JButton saveIndexedCorpus;
    private javax.swing.JButton saveLogicButton;
    private javax.swing.JButton saveModel;
    private javax.swing.JButton savePatternSet;
    private javax.swing.JButton setIndexButton;
    private javax.swing.JButton startTrainingButton;
    private javax.swing.JLabel termPairSetLabel;
    private javax.swing.JLabel termSetLabel;
    private javax.swing.JLabel textFileLabel;
    private javax.swing.JLabel totalPatternsLabel;
    private javax.swing.JButton visualizeModel;
    private javax.swing.JTextArea wekaOutput;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Holds value of property corpusDisplayTableModel.
     */
    private CorpusTableModel corpusDisplayTableModel;
    
    /**
     * Getter for property corpusDisplayTableModel.
     * @return Value of property corpusDisplayTableModel.
     */
    public CorpusTableModel getCorpusDisplayTableModel() {
        if(corpusDisplayTableModel != null)
            return this.corpusDisplayTableModel;
        else
            return corpusDisplayTableModel = new CorpusTableModel();
    }
    
    /**
     * Setter for property corpusDisplayTableModel.
     * @param corpusDisplayTableModel New value of property corpusDisplayTableModel.
     */
    public void setCorpusDisplayTableModel(CorpusTableModel corpusDisplayTableModel) {
        this.corpusDisplayTableModel = corpusDisplayTableModel;
    }
    
}
